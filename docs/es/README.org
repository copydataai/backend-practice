#+TITLE: RandomCameraReview es

* Overview
[[org:../../Proyects/backend-practice/docs/es/project_definition.md][Definicion del proyecto y requerimientos del cliente]]
* Arquitectura
[[file:~/Documents/Proyects/backend-practice/docs/Backend-practice.png][Architecture from Project]]
En ambos el desarrollo esta basado en los servicios de AWS, usando docker para emular el servicio lambda y luego ser agregado a ECR para la integracion directa con AWS Lambda.
Use Go y Node por que son los dos ultimos langs que aprendi este a~o.
** Load Balancer
Nginx como load Balancer, lo use por que es facil de configurar.
** Node con Express
Para abstraer el manejo de middlewares y administracion de los verbs HTTP.
** Plan de Pruebas
- Registrar usuario, crear reviews, que alguien pueda logearse y leerlo.
No use TDD o BDD por mi poca experiencia con los tests.
** Go con Gorilla/mux
Uso de gorilla/mux por que el manejo de HandleFuncs es facil y modulable. Para uso simple de los verbs GET, POST y PUT.
** PostgreSQL x2
- Replicacion
- Una para escritura y lectura, la otra solo para lectura
Use PostqueSQL por que la replicacion por docker es sencilla.
